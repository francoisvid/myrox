import Foundation
import UserNotifications
import SwiftUI

@MainActor
class NotificationService: NSObject, ObservableObject {
    static let shared = NotificationService()
    
    private override init() {
        super.init()
        setupNotificationDelegate()
    }
    
    // MARK: - Configuration
    private func setupNotificationDelegate() {
        UNUserNotificationCenter.current().delegate = self
    }
    
    // MARK: - Autorisation
    func requestPermission() async -> Bool {
        let center = UNUserNotificationCenter.current()
        
        do {
            let granted = try await center.requestAuthorization(options: [.alert, .sound, .badge])
            return granted
        } catch {
            print("Erreur lors de la demande d'autorisation de notification: \(error)")
            return false
        }
    }
    
    // MARK: - Notification de fin de s√©ance
    func scheduleWorkoutCompletionNotification(for workout: Workout) async {
        let center = UNUserNotificationCenter.current()
        
        // Supprimer les notifications pr√©c√©dentes de m√™me type
        center.removePendingNotificationRequests(withIdentifiers: ["workout-completion"])
        
        let content = UNMutableNotificationContent()
        content.title = "S√©ance termin√©e ! üéâ"
        content.body = "Vos statistiques sont pr√™tes √† √™tre partag√©es"
        content.sound = .default
        
        // Ajouter des donn√©es personnalis√©es
        content.userInfo = [
            "type": "workout-completion",
            "workoutId": workout.id.uuidString,
            "templateName": workout.templateName ?? "S√©ance",
            "duration": workout.totalDuration,
            "distance": workout.totalDistance
        ]
        
        // Programmer la notification pour dans 2 secondes (laisser le temps √† la vue de s'afficher)
        let trigger = UNTimeIntervalNotificationTrigger(timeInterval: 2, repeats: false)
        let request = UNNotificationRequest(
            identifier: "workout-completion",
            content: content,
            trigger: trigger
        )
        
        do {
            try await center.add(request)
            print("Notification de fin de s√©ance programm√©e pour dans 2 secondes")
        } catch {
            print("Erreur lors de la programmation de la notification: \(error)")
        }
    }
    
    // MARK: - Notification de nouveau record
    func schedulePersonalRecordNotification(exerciseName: String, recordType: String) async {
        let center = UNUserNotificationCenter.current()
        
        let content = UNMutableNotificationContent()
        content.title = "Nouveau record personnel ! üèÜ"
        content.body = "F√©licitations ! Vous avez battu votre record sur \(exerciseName)"
        content.sound = .default
        
        content.userInfo = [
            "type": "personal-record",
            "exerciseName": exerciseName,
            "recordType": recordType
        ]
        
        let trigger = UNTimeIntervalNotificationTrigger(timeInterval: 1, repeats: false)
        let request = UNNotificationRequest(
            identifier: "personal-record-\(UUID().uuidString)",
            content: content,
            trigger: trigger
        )
        
        do {
            try await center.add(request)
            print("Notification de record personnel programm√©e pour \(exerciseName)")
        } catch {
            print("Erreur lors de la programmation de la notification de record: \(error)")
        }
    }
    
    // MARK: - V√©rifier les autorisations
    func checkNotificationStatus() async -> UNAuthorizationStatus {
        let center = UNUserNotificationCenter.current()
        let settings = await center.notificationSettings()
        return settings.authorizationStatus
    }
    
    // MARK: - Debug
    func checkPendingNotifications() async {
        let center = UNUserNotificationCenter.current()
        let pending = await center.pendingNotificationRequests()
        print("üîî Notifications en attente: \(pending.count)")
        for notification in pending {
            print("  - \(notification.identifier): \(notification.content.title)")
            if let trigger = notification.trigger as? UNTimeIntervalNotificationTrigger {
                print("    D√©lai: \(trigger.timeInterval)s")
            }
        }
    }
    
    // MARK: - Notification de fin de s√©ance depuis la Watch
    func scheduleWorkoutCompletionFromWatchNotification(for workout: Workout) async {
        let center = UNUserNotificationCenter.current()
        
        // Supprimer les notifications pr√©c√©dentes de m√™me type
        center.removePendingNotificationRequests(withIdentifiers: ["workout-completion-watch"])
        
        let content = UNMutableNotificationContent()
        content.title = "S√©ance Apple Watch termin√©e ! ‚åö"
        content.body = "Synchronis√©e depuis votre Apple Watch - Statistiques disponibles"
        content.sound = .default
        
        // Ajouter des donn√©es personnalis√©es
        content.userInfo = [
            "type": "workout-completion-watch",
            "workoutId": workout.id.uuidString,
            "templateName": workout.templateName ?? "S√©ance",
            "duration": workout.totalDuration,
            "distance": workout.totalDistance,
            "source": "watch"
        ]
        
        // Programmer la notification imm√©diatement (pas de vue √† afficher dans ce cas)
        let trigger = UNTimeIntervalNotificationTrigger(timeInterval: 0.5, repeats: false)
        let request = UNNotificationRequest(
            identifier: "workout-completion-watch",
            content: content,
            trigger: trigger
        )
        
        do {
            try await center.add(request)
            print("üì±‚åö Notification de fin de s√©ance Apple Watch programm√©e")
        } catch {
            print("Erreur lors de la programmation de la notification Watch: \(error)")
        }
    }
}

// MARK: - UNUserNotificationCenterDelegate
extension NotificationService: UNUserNotificationCenterDelegate {
    
    // Cette m√©thode permet d'afficher les notifications m√™me quand l'app est en premier plan
    nonisolated func userNotificationCenter(
        _ center: UNUserNotificationCenter,
        willPresent notification: UNNotification,
        withCompletionHandler completionHandler: @escaping (UNNotificationPresentationOptions) -> Void
    ) {
        print("üì± Notification re√ßue en premier plan: \(notification.request.content.title)")
        
        // Afficher la notification avec son, badge et banni√®re m√™me en premier plan
        completionHandler([.banner, .sound, .badge])
    }
    
    // Cette m√©thode g√®re les interactions avec les notifications
    nonisolated func userNotificationCenter(
        _ center: UNUserNotificationCenter,
        didReceive response: UNNotificationResponse,
        withCompletionHandler completionHandler: @escaping () -> Void
    ) {
        let userInfo = response.notification.request.content.userInfo
        print("üëÜ Notification tap√©e: \(userInfo)")
        
        // D√©l√©guer la navigation au service sp√©cialis√©
        Task { @MainActor in
            NotificationNavigationService.shared.handleNotificationTap(userInfo: userInfo)
        }
        
        // Traiter selon le type de notification (logs pour debug)
        if let type = userInfo["type"] as? String {
            switch type {
            case "workout-completion":
                print("üèãÔ∏è Notification de fin de s√©ance tap√©e - Ouverture de la modale")
            case "workout-completion-watch":
                print("‚åö Notification de fin de s√©ance Apple Watch tap√©e - Ouverture de la modale")
            case "personal-record":
                print("üèÜ Notification de record personnel tap√©e - Ouverture des statistiques")
            default:
                break
            }
        }
        
        completionHandler()
    }
}
