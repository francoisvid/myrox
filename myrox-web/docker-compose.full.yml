services:
  # Base de données PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: myrox-postgres
    restart: always
    environment:
      POSTGRES_DB: myrox
      POSTGRES_USER: myrox_user
      POSTGRES_PASSWORD: myrox_password
    ports:
      - "5433:5432"  # Port différent pour éviter les conflits
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - myrox-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U myrox_user -d myrox"]
      interval: 30s
      timeout: 10s
      retries: 3

  # API Backend
  api:
    build:
      context: ../myROX-api
      dockerfile: Dockerfile
    container_name: myrox-api
    restart: always
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://myrox_user:myrox_password@postgres:5432/myrox
      PORT: 3001
    ports:
      - "3001:3001"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - myrox-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Application Web Frontend
  web:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: myrox-web
    restart: always
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_URL: http://localhost:3001
    ports:
      - "3002:3000"
    depends_on:
      api:
        condition: service_healthy
    networks:
      - myrox-network

volumes:
  postgres_data:

networks:
  myrox-network:
    driver: bridge 