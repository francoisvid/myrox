generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String            @id @default(uuid())
  firebaseUID       String            @unique @map("firebase_uid")
  email             String?
  displayName       String?           @map("display_name")
  createdAt         DateTime          @default(now()) @map("created_at")
  updatedAt         DateTime          @updatedAt @map("updated_at")
  coachId           String?           @map("coach_id")
  usedInvitation    CoachInvitation?  @relation("InvitationUser")
  coachProfile      Coach?            @relation("CoachUser")
  personalBests     PersonalBest[]
  personalTemplates Template[]        @relation("UserTemplates")
  userInformations  UserInformations?
  coach             Coach?            @relation("CoachAthletes", fields: [coachId], references: [id])
  workouts          Workout[]
  assignedTemplates Template[]        @relation("AssignedTemplates")

  @@map("users")
}

model Coach {
  id                    String            @id @default(uuid())
  firebaseUID           String            @unique @map("firebase_uid")
  displayName           String            @map("display_name")
  email                 String?
  specialization        String?
  bio                   String?
  profilePicture        String?           @map("profile_picture")
  certifications        String[]
  isActive              Boolean           @default(true) @map("is_active")
  createdAt             DateTime          @default(now()) @map("created_at")
  updatedAt             DateTime          @updatedAt @map("updated_at")
  userId                String            @unique @map("user_id")
  isSubscriptionActive  Boolean           @default(true) @map("is_subscription_active")
  maxAthletes           Int               @default(3) @map("max_athletes")
  maxInvitations        Int               @default(5) @map("max_invitations")
  subscriptionExpiresAt DateTime?         @map("subscription_expires_at")
  subscriptionPlan      SubscriptionPlan  @default(FREE) @map("subscription_plan")
  trialEndsAt           DateTime?         @map("trial_ends_at")
  invitations           CoachInvitation[]
  user                  User              @relation("CoachUser", fields: [userId], references: [id])
  createdTemplates      Template[]        @relation("CoachTemplates")
  athletes              User[]            @relation("CoachAthletes")

  @@map("coaches")
}

model Template {
  id            String             @id @default(uuid())
  name          String
  rounds        Int                @default(1)
  description   String?
  difficulty    Difficulty
  estimatedTime Int                @map("estimated_time")
  category      WorkoutCategory
  isPersonal    Boolean            @default(true) @map("is_personal")
  isActive      Boolean            @default(true) @map("is_active")
  createdAt     DateTime           @default(now()) @map("created_at")
  updatedAt     DateTime           @updatedAt @map("updated_at")
  creatorId     String             @map("creator_id")
  coachId       String?            @map("coach_id")
  exercises     TemplateExercise[]
  coach         Coach?             @relation("CoachTemplates", fields: [coachId], references: [id])
  creator       User               @relation("UserTemplates", fields: [creatorId], references: [id])
  workouts      Workout[]
  assignedUsers User[]             @relation("AssignedTemplates")

  @@map("templates")
}

model Exercise {
  id                String             @id @default(uuid())
  name              String             @unique
  description       String?
  category          ExerciseCategory
  equipment         String[]
  instructions      String?
  videoUrl          String?            @map("video_url")
  isHyroxExercise   Boolean            @default(false) @map("is_hyrox_exercise")
  createdAt         DateTime           @default(now()) @map("created_at")
  updatedAt         DateTime           @updatedAt @map("updated_at")
  templateExercises TemplateExercise[]
  workoutExercises  WorkoutExercise[]

  @@map("exercises")
}

model TemplateExercise {
  id         String   @id @default(uuid())
  order      Int
  sets       Int?
  reps       Int?
  duration   Int?
  distance   Float?
  weight     Float?
  restTime   Int?     @map("rest_time")
  notes      String?
  templateId String   @map("template_id")
  exerciseId String   @map("exercise_id")
  exercise   Exercise @relation(fields: [exerciseId], references: [id])
  template   Template @relation(fields: [templateId], references: [id], onDelete: Cascade)

  @@map("template_exercises")
}

model Workout {
  id            String            @id @default(uuid())
  name          String?
  startedAt     DateTime          @map("started_at")
  completedAt   DateTime?         @map("completed_at")
  totalDuration Int?              @map("total_duration")
  notes         String?
  rating        Int?
  createdAt     DateTime          @default(now()) @map("created_at")
  updatedAt     DateTime          @updatedAt @map("updated_at")
  userId        String            @map("user_id")
  templateId    String?           @map("template_id")
  personalBests PersonalBest[]
  exercises     WorkoutExercise[]
  template      Template?         @relation(fields: [templateId], references: [id])
  user          User              @relation(fields: [userId], references: [id])

  @@map("workouts")
}

model WorkoutExercise {
  id                String    @id @default(uuid())
  order             Int
  sets              Int?
  repsCompleted     Int?      @map("reps_completed")
  durationCompleted Int?      @map("duration_completed")
  distanceCompleted Float?    @map("distance_completed")
  weightUsed        Float?    @map("weight_used")
  restTime          Int?      @map("rest_time")
  notes             String?
  completedAt       DateTime? @map("completed_at")
  workoutId         String    @map("workout_id")
  exerciseId        String    @map("exercise_id")
  exercise          Exercise  @relation(fields: [exerciseId], references: [id])
  workout           Workout   @relation(fields: [workoutId], references: [id], onDelete: Cascade)

  @@map("workout_exercises")
}

model PersonalBest {
  id           String   @id @default(uuid())
  exerciseType String   @map("exercise_type")
  value        Float
  unit         String
  achievedAt   DateTime @map("achieved_at")
  createdAt    DateTime @default(now()) @map("created_at")
  userId       String   @map("user_id")
  workoutId    String?  @map("workout_id")
  user         User     @relation(fields: [userId], references: [id])
  workout      Workout? @relation(fields: [workoutId], references: [id], onDelete: Cascade)

  @@unique([userId, exerciseType])
  @@map("personal_bests")
}

model UserInformations {
  id                         String             @id @default(uuid())
  userId                     String             @unique @map("user_id")
  hasCompletedOnboarding     Boolean            @default(false) @map("has_completed_onboarding")
  hyroxExperience            HyroxExperience?   @map("hyrox_experience")
  hasCompetedHyrox           Boolean?           @map("has_competed_hyrox")
  primaryGoal                HyroxGoal?         @map("primary_goal")
  currentTrainingFrequency   TrainingFrequency? @map("current_training_frequency")
  trainingTypes              String[]           @map("training_types")
  fitnessLevel               Int?               @map("fitness_level")
  injuriesLimitations        String?            @map("injuries_limitations")
  familiarWithHyroxStations  Boolean?           @map("familiar_hyrox_stations")
  difficultExercises         String[]           @map("difficult_exercises")
  hasGymAccess               Boolean?           @map("has_gym_access")
  gymName                    String?            @map("gym_name")
  gymLocation                String?            @map("gym_location")
  availableEquipment         String[]           @map("available_equipment")
  preferredTrainingFrequency TrainingFrequency? @map("preferred_training_frequency")
  preferredSessionDuration   SessionDuration?   @map("preferred_session_duration")
  targetCompetitionDate      DateTime?          @map("target_competition_date")
  preferredTrainingTime      TrainingTime?      @map("preferred_training_time")
  preferredIntensity         TrainingIntensity? @map("preferred_intensity")
  prefersStructuredProgram   Boolean?           @map("prefers_structured_program")
  wantsNotifications         Boolean?           @map("wants_notifications")
  createdAt                  DateTime           @default(now()) @map("created_at")
  updatedAt                  DateTime           @updatedAt @map("updated_at")
  completedAt                DateTime?          @map("completed_at")
  user                       User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_informations")
}

model CoachInvitation {
  id           String    @id @default(uuid())
  code         String    @unique
  coachId      String    @map("coach_id")
  usedByUserId String?   @unique @map("used_by_user_id")
  usedAt       DateTime? @map("used_at")
  isActive     Boolean   @default(true) @map("is_active")
  description  String?
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")
  coach        Coach     @relation(fields: [coachId], references: [id], onDelete: Cascade)
  usedBy       User?     @relation("InvitationUser", fields: [usedByUserId], references: [id])

  @@map("coach_invitations")
}

enum Difficulty {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  EXPERT
}

enum WorkoutCategory {
  HYROX
  STRENGTH
  CARDIO
  FUNCTIONAL
  FLEXIBILITY
  MIXED
}

enum ExerciseCategory {
  RUNNING
  STRENGTH
  FUNCTIONAL
  CARDIO
  FLEXIBILITY
  HYROX_STATION
}

enum HyroxExperience {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum HyroxGoal {
  FIRST_PARTICIPATION
  IMPROVE_TIME
  PROFESSIONAL_COMPETITION
}

enum TrainingFrequency {
  ONCE_WEEK
  TWICE_WEEK
  THREE_WEEK
  FOUR_WEEK
  FIVE_PLUS_WEEK
}

enum SessionDuration {
  THIRTY_MIN
  FORTY_FIVE_MIN
  ONE_HOUR
  ONE_HOUR_PLUS
}

enum TrainingTime {
  MORNING
  MIDDAY
  EVENING
  FLEXIBLE
}

enum TrainingIntensity {
  SHORT_INTENSE
  LONG_MODERATE
  MIXED
}

enum SubscriptionPlan {
  FREE
  STARTER
  PROFESSIONAL
  ENTERPRISE
}
